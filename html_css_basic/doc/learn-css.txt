22. CSS cơ bản - Inline, internal, and external CSS
    - inline (css nội tuyến): là cách viết mã CSS ngay bên trong phần tử cơ bản html
        <h1 style="color: red">Chào mừng bạn đến với trang chủ</h1>

    - internal (css nội bộ): là cách viết mã css trong cặp thẻ style đặt trong khối head
            <style>
                h2 {
                    color: yellow;
                    text-align: center;
                }
            </style>

    - external (css bên ngoài): tách biệt file css với file html
        <link rel="stylesheets" href="assets/css/style.css" />

    - Mức độ ưu tiên: phần khai báo của cách nào ở sau thì ghi đè lên cách trước đó

23. Một số thuộc tính CSS cơ bản
    - color: Màu chữ
    - font-style: Kiểu chữ
    - font-family: Font chữ
    - text-transform: Chuyển hoa thường
    - text-align: Căn dòng
    - fort-size: Cỡ chữ
    - line-height: Định khoảnh cách giữa các dòng =x lần font chữ

24. Opacity, Display và Visibility
    - opacity: quy định độ trong suốt
        0.0 -> 1.0 / 0% -> 100%
    - background-image: url() : hình nền
    - display: none : ẩn khỏi trang web
    - visibility:
        + hidden: ẩn
        + visible: hiện

    - opacity: 0
        + Mô tả: Làm phần tử trong suốt hoàn toàn.
        + Chiếm không gian trên trang: Có.
        + Có thể tương tác (click, focus,...): Có.
        + Có trong DOM: Có.

    - display: none
        + Mô tả: Ẩn hoàn toàn phần tử, loại khỏi luồng hiển thị.
        + Chiếm không gian trên trang: Không.
        + Có thể tương tác (click, focus,...): Không.
        + Có trong DOM: Không (không hiển thị trong cây hiển thị DOM).

    - visibility: hidden
        + Mô tả: Ẩn phần tử nhưng vẫn giữ không gian bố cục.
        + Chiếm không gian trên trang: Có.
        + Có thể tương tác (click, focus,...): Không.
        + Có trong DOM: Có.

25. Favicon là gì, tạo và tối ưu cho đa thiết bị
    - Tạo icon cho trang trên trình duyệt <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />
    - Trình cắt ảnh https://www.favicon-generator.org

26. CSS Prefix - Tăng cường tương thích đa trình duyệt cho website _caniuse.com
    - user-select: none; không cho phép người dùng bôi đen
    - Chuyển code css sang dạng có prefix https://tools.webdevpuneet.com/css-autoprefixer
    - Kiểm tra thuộc tính đó có cần prefix không: https://caniuse.com

27. CSS Selector cơ bản_ Hiểu về Tên thẻ, ID, và Class
    - id: khi muốn áp dụng css cho duy nhất 1 phần tử, duy nhất, không đặt trùng
    - class: khi muốn áp dụng css cho 1 hoặc nhiều phần tử

28. Combinator selectors * Selector element.class
    - *{  }
    - #id
    - .class
    - tag.class

29. Combinator selectors p2 - element,element CLASS1.class2
    - h1, h2, p, ul { color: red; } : gán css cho các thẻ h1, h2, p, ul
    - p, .class, #id { font-size: 50px; } : gán css cho thẻ p, cho các thẻ có class = class và 1 thẻ có id = id
    - class1.class2 {} : gán css cho thẻ có đồng thời 2 class class1 và class2

30. Combinator selectors p3 - Space element_element
    - div p {} : gán css cho thẻ p nằm trong thẻ div
    - .class p {} : gán css cho thẻ p nằm trong class = class
    - div > p {} : gán thẻ css cho thẻ p là con trực tiếp của thẻ div (nằm trong 1 cấp duy nhất <div> <p></p> </div>)

31. Combinator selectors p4 - element+element element~element
    - h1 + h2 {} : gán css cho thẻ h2 nằm ngay sau thẻ h1 (<h1></h1> <h2></h2>)
    - .class + h3 {} : gán css cho thẻ h3 nằm ngay sau thẻ có class = class (<div class="class"></div> <h3></h3>)
    - img ~ a {} : gán css cho tất cả thẻ a đứng sau thẻ img (<img/> <a></a> <a></a> <a></a>)

32. Attribute Selectors
    - [href] {} : áp dụng css cho tất cả các thẻ có thuộc tính href
    - a[href] {} : áp dụng cho thẻ a có thuộc tính href
    - a[target="_blank"] {} : áp dụng css cho thẻ a có thuộc tính href = "_blank"
    - [title~="pic"] {}  : áp dụng css cho thẻ có thuộc tính title có chứa từ "pic"
    - [title*="pic"] {}  : áp dụng css cho thẻ có thuộc tính title có chứa chuỗi "pic"
    - [title|="pic"] {}  : áp dụng css cho thẻ có thuộc tính title có: từ "pic", hoặc từ "pic" và các từ sau đó phải được nối bằng gạch ngang
    - [title^="pic"] {}  : áp dụng css cho thẻ có thuộc tính title có từ "pic" đầu tiên
    - [title$="pic"] {}  : áp dụng css cho thẻ có thuộc tính title có từ "pic" cuối cùng

33. Thông thạo CSS pseudo-classes hover active trong một thời gian ngắn - Lớp giả
    - :hover{} : gán css khi di chuột qua
    - :active{} : gán css khi nhấn giữ chuột

34. Sử dụng pseudo-classes link và a:visited để làm nổi bật liên kết
    - :link{} : gán css khi chưa click vào
    - :visited{} : gán css khi đã click truy cập

35. CSS Pseudo-classes empty và target - Cải thiện trải nghiệm người dùng trên trang web
    - :empty{} : gán css cho phần tử không có nội dung
    - :target{} : gán css cho phần tử không có nội dung

36. CSS: Pseudo-classes: Child selectors
    - p:first-child{} : chọn các thẻ p là thẻ con đầu tiên
    - p:last-child{} : chọn các thẻ p là thẻ con cuối cùng
    - p:nth-child(n){} : chọn các thẻ p là thẻ thứ n từ trên xuống
    - p:nth-last-child(n){} : chọn các thẻ p là thẻ thứ n từ cuối lên
    - p:only-child{} : chọn các thẻ p là thẻ con duy nhất
    - n:
        + old (nhảy theo n lẻ)
        + even (nhảy theo n chẵn)
        + 2n + 1 (nhảy theo step mong muốn)
        
37. CSS: Pseudo-classes: Type selectors
    - p:first-of-type{} : chọn các thẻ p xuất hiện đầu tiên trong thẻ cha
    - p:last-of-type{} : chọn các thẻ p xuất hiện cuối cùng trong thẻ cha
    - p:nth-of-type(n){} : chọn các thẻ p xuất hiện thứ n trong thẻ cha
    - p:nth-last-of-type(n){} : chọn các thẻ p xuất hiện thứ n trong thẻ cha, tính từ cuối lên
    - p:only-of-type{} : chọn các thẻ p xuất hiện duy nhất trong thẻ cha

38. CSS: Pseudo-classes: Not(selector)
    - .class.not(p): chọn các thẻ có class="class" loại trừ thẻ <p></p>
    - .class.not(:first-of-type): chọn các thẻ có class="class" loại trừ các thẻ xuất hiện lần đầu

    - Mức độ ưu tiên nhận css
        1. !important
        2. Inline style (viết trong thẻ html)
        3. ID(#) selector
        4. Class(.) hoặc pseudo-class(:) selector
        5. Element selector(h, div, p, a,...)
        6. Universal selector(*): bộ chọn chung
    
39. Học CSS selector qua trò chơi
    - https://game.tuhoc.cc

40. CSS Box model: Padding
    - Kích thước phần tử: width * height = content + padding + border
    - padding: 20px;  
        cả 4 hướng
    - padding: 20px 10px;
        trên+dưới  trái+phải
    - padding: 20px 10px 40px;
        trên trái+phải dưới
    - padding: 20px 10px 40px 30px;
        trên phải dưới trái

41. CSS Box model: Border
    - border: <line-width> || <line-style> || <color>
    - border-width:
    - border-style:
    - border-color:
    - border-radius:

42. CSS Box model: Margin

43. Học căn giữa trang bằng CSS margin

44. Hướng dẫn CSS - Sử dụng Margin âm để tạo hiệu ứng độc đáo
    - https://www.uifaces.co

45. Giải thích CSS Margin Collapse và cách khắc phục căn bản
    - Là hiện tượng chồng lặp thuộc tính margin khi 2 phần tử liền kề cùng thiết lập margin với phần tử còn lại theo chiều dọc
    - Margin collapse chỉ ảnh hưởng theo chiều dọc

46. CSS outline
    - Outline là đường viền bao quanh mép ngoài cùng của đối tượng
        + không làm tăng kích thước phần tử
        + là 1 vùng bao quanh bên ngoài, chiếm cả phần margin
        
47. CSS Box-Sizing: Content-Box và Border-Box
    - Content box: width, height là kích thước của content
    - Border box: width, height là kích thước của phần tử (thường hay sử dụng)

48. CSS Mặc định - Default CSS Values
    - Default CSS Values: trình duyệt sẽ tự thêm vào các thuộc tính mặc định để hiển thị các thẻ HTML, 
                          tuy nhiên các trình duyệt khác nhau có thể các thuộc tính được thêm vào sẽ khác nhau
49. CSS Inheritance - kế thừa trong css

50. Reset CSS
    - Các thẻ có CSS mặc định làm khó khăn trong việc kiểm soát kích thước và tính toán kích thước so với thiết kế
    - https://meyerweb.com/eric/tools/css/reset/
    - Lưu ý: reset.css luôn đặt link file trên cùng

51. Block, Inline, and Inline-Block explained
    - Các thẻ HTML đều có thuộc tính display: block, inline, inline-Block
    - Block Element: các thẻ ở trạng thái mặc định, luôn chiếm 100% chiều rộng của thẻ cha bất kể nội dung dài hay ngắn (vd: div, p, h1, h2,...)
    - Inline Element: hộp có kích thước phụ thuộc vào nội dung bên trong nó (vd: a, strong, em, button,...)

52. CSS Units Explained 
    - Đơn vị tuyệt đối - Absolute lengths
        + Pixel - Picture Element - điểm ảnh: là đơn vị cơ bản để đo kích thước 1 hình ảnh kĩ thuật số

53. CSS Relative Lengths | Đơn vị %
    - Đơn vị tương đối - Relative lengths
        + Kích thước = % so với thẻ cha của nó

54. CSS Relative Lengths | Đơn vị vw, vh CSS
    - vw: % chiều rộng khung nhìn
    - vh: % chiều cao khung nhìn

55. CSS Relative Lengths | Đơn vị em CSS
    - Nem: kích thước gấp N lần font chữ hiện tại (có kế thừa)
        + TH1: Thẻ cha và thẻ con không có font-size -> lấy kích thước của root(html) (16px)
        + TH2: Thẻ cha có font-size tuyệt đối -> kế thừa từ thẻ cha
        + TH3: Cả thẻ cha và thẻ con đều đặt font-size -> ưu tiên font-size của chính nó
        + TH4: Thẻ cha có font-size tương đối -> thẻ cha lấy kích thước mặc định từ trình duyệt, thẻ con tiếp tục kế thừa thẻ cha

56. CSS Relative Lengths | Đơn vị rem CSS
    - Nrem: kích thước gấp N lần font chữ root element (không kế thừa)
        html{
            font-size: 62.5%;
        }

57. CSS Colors từ A đến Z
    - có 16^6 = 16777216 ~ 16,7tr màu
    - Hệ RGB
        + rgb(red, green, blue)
        + rgba(red, green, blue, alpha)
    - Hệ thập lục phân: 
        + #rrggbb (rr: red, gg: green, bb: blue) dải giá trị từ: 00 -> FF
        + #rrggbbaa (rr: red, gg: green, bb: blue, aa: alpha)
    - Color name: red, blue, pink, yellow, ...
    - currentColor: lấy màu của phần tử hiện tại, có tính kế thừa

58. CSS Fonts Explained
    - Các kiểu font phổ biến
        + Font không có gai ở đầu chữ cái: Sans serif
        + Font có gai ở đầu: Serif
        + Font có cùng độ rộng: Monospace

59. System Font CSS
    - https://css-tricks.com/snippets/css/system-font-stack
        + /* System Fonts with system-ui */
         body {
            font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
         }

60. CSS Google Fonts
    - https://fonts.google.com

61. Typography in CSS
    - https://cssreference.io/typography
    - font-weight: độ dày của chữ (100 - 900)
    - line-height: chiều cao dòng

62. CSS tips
    - letter-spacing: tăng giảm khoảng cách giữa các ký tự
    - word-spacing: tăng giảm khoảng cách giữa các từ
    - text-align: căn dòng text (trong box chứa nó)
        + justify: căn dàn đều 2 bên
        + left: căn trái (default)
        + right: căn phải
        + center: căn giữa

63. Typography
    - text-decoration:
        + none: bỏ gạch chân
        + underline: thêm gạch chân
        + line-through: thêm gạch ngang
        + overline: gạch trên đầu
        + định kiểu của dấu gạch, màu sắc, kích thước (text-decoration: underline dotted blue 5px)

    - text-indent:
        + -Xpx: thụt lề -X px
        + Xpx: thụt lề X px

    - text-transform:
        + capitalize: viết hoa chữ cái đầu
        + lowercase: viết thường toàn bộ text
        + uppercase: viết hoa toàn bộ text

64. Typography
    - https://codepen.io
    - white-space: quy định về khoảng trắng khi code
        (ngoại trừ thẻ pre giữ nguyên định dạng code)
        + normal: trạng thái mặc định
        + nowrap: không xuống dòng (kể cả chạm tới lề)
        + pre: giữ nguyên định dạng code, giống thẻ pre
        + pre-line: giữ nguyên định dạng theo line(enter)
            tất cả khoảng trắng dư thừa mỗi dòng trong nội dung văn bản sẽ bị loại bỏ
            dòng mới được giữ nguyên
        + pre-wrap

    - word-break: khi đoạn text hoặc link dài, người dùng nhập liền nhau thì có thể gây vỡ giao diện vì text không bị xuống dòng
        + break-all: để bẻ xuống dòng

65. CSS Typography
    - text-shadow: bóng đổ text
        + text-shadow: horizontal vertical blur color
                       trục ngang | trục dọc | độ nhoè | màu sắc
    - overflow:
        + visible (default): hiển thị nội dung kể cả vượt box chứa
        + hidden: ẩn nội dung vượt box chứa
        + scroll: tự động hiện scroll khi tràn khung
        + auto: nếu nội dung ngắn -> không có scroll bar; nếu nội dung vượt box chứa -> tự động sinh ra scroll bar

66. Tối ưu trải nghiệm người dùng với overflow - scrollbar trong CSS
        - overscroll-behavior
        - custom scrollbar css: tùy biến thanh cuộn
            /* width */
            ::-webkit-scrollbar {
                width: 10px;
            }

            /* Track */
            ::-webkit-scrollbar-track {
                background: #f1f1f1;
            }

            /* Handle */
            ::-webkit-scrollbar-thumb {
                background: #888;
            }

            /* Handle on hover */
            ::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

67. Text-Overflow trong CSS
    - text-overflow: ellipsis;
        h2 {
            width: 500px;
            white-space: nowrap;
            background-color: pink;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    h3 {
        background-color: paleturquoise;
        overflow: hidden;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        display: -webkit-box;
    }

68. Tạo hiệu ứng biểu tượng đẹp với Font Awesome
    - https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css
    - https://fontawesome.com

69. Học CSS Background-color
    - nền sẽ đổ vào toàn bộ các phần tính vào kích thước phần tử

70,71,72. Background-Image
    - background-image:
        + url()
        + none
    - background-repeat:
        + no-repeat: bg không lặp lại
        + repeat-x: bg lặp lại trục x
        + repeat-y: bg lặp lại trục yy
        + repeat: bg lặp lại (mặc định)
    - background-size:
        + contain: ảnh vừa khung hình, giữ nguyên tỉ lệ ảnh, không bị mất ảnh, nếu còn khoảng trống ảnh sẽ bị lặp lại
        + cover: ảnh vừa khớp khung hình, giữ nguyên tỉ lệ ảnh, có thể phất 1 phần ảnh, không bị lặp lại
        + n%
    - background-position:
        + top
        + left
        + right
        + bottom
        + center
        + top left
        + top right
        + bottom left
        + bottom right
        + x% y%

73. CSS linear-gradient - background nền gradient cho trang web
    - background-image: linear-gradient(direction, color-stop1, color-stop2);
    - https://cssgradient.io
    
74. Hiểu rõ background-attachment
    - background-attachment:
        + scroll (default): ảnh sẽ tự động cuộn theo trình duyệt khi kéo lên xuống
        + fixed: ảnh cố định khi kéo scroll lên xuống
        + local: ảnh cố định cục bộ trong bố cục con

75. CSS Background-clip
    - background-clip:
        + border-box (default): ảnh sẽ đổ vào full kích thước phần tử
        + padding-box: ảnh chỉ đổ đến padding
        + content-box: ảnh chỉ đổ phần content

76. CSS Background-origin
    - Xác định gốc bức ảnh đặt ở vị trí nào
        + border-box: gốc 0,0 của ảnh sẽ ở border
        + padding-box (default): gốc ảnh mặc định ở phần padding
        + content-box: gốc 0,0 của ảnh sẽ ở content

77. CSS Background Shorthand Sử dụng cú pháp viết tắt Ngắn gọn Background

78. CSS backdrop-filter Cách làm mờ nền đơn giản
    - backdrop-filter: blur(npx) contrast(x%)

79. Clip-path CSS
    - Tạo 1 vùng cắt, nội dung trong vùng cắt sẽ đc hiển thị, nội dung nằm ngoài sẽ bị ẩn đi
        + circle()
        + inset()
        + polygon()

80. Hiệu ứng đổ bóng Box-shadow
    - https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
    - https://box-shadow.dev
    - https://getcssscan.com/css-box-shadow-examples
    - box-shadow: offset-x | offset-y | color

81. Quản lý sự kiện chuột pointer-events
    - pointer-events: none;   không cho tương tác

82. Làm việc với hình ảnh
    - loading="lazy" : kéo đến mới load ảnh
    -   /* mẹo căn giữa */
        display: block;
        margin: 0 auto;

83. CSS Pseudo elements
    - p::first-line : chọn dòng đầu tiên các thẻ p
    - p::first-letter : chọn chữ cái đầu tiên các thẻ p
    - p::selection : chọn phần tử vùng đang được bôi đen các thẻ p
    - p::market : chọn các điểm đánh dấu của các phần tử li p
    - p::before : thêm phần tử vào đằng trước thẻ p
    - p::after : thêm phần tử vào đằng sau thẻ p

84. CSS Counters User
    .box {
        /* Tạo biến đếm, reset về 0 */
        counter-reset: section;
    }

    .box h2 {
        /* Tăng biến đếm lên 1  */
        counter-increment: section;
        /* Tạo biến đếm và reset biến đếm thẻ h3 về 0 */
        counter-reset: sub-section;
    }

    .box h2::before {
        /* Thêm vào trước thẻ h2  */
        content: "Phần " counter(section) ": ";
    }

    .box h3 {
        /* Tăng biến đếm lên 1  */
        counter-increment: sub-section;
    }

    .box h3::before {
        /* Thêm vào trước thẻ h3  */
        content: "Phần " counter(section) "." counter(sub-section) ": ";
    }

85. Tính toán linh hoạt với CSS calc() - CSS Calc() function
    - calc()

86. Học CSS Variables
    :root {
        --box-height: 100px;
        --box-color: #0f0;
    }

    .box {
        height: var(--box-height);
        background-color: var(--box-color);
        margin-bottom: 10px;
    }

87. CSS Position
    - Thuộc tính position: cho phép điều chỉnh vị trí các phần tử trên trang web

    - position: static; đây là giá trị mặc định của position, vị trí cố định trên html khi chưa can thiệp bằng css

    - position: relative; - định vị so với vị trí ban đầu của nó 1 khoảng x
        + left
        + right
        + top
        + bottom

    - position: absolute; - phần tử được đưa ra khỏi luồng ban đầu

    - position: fixed; - fix cứng phần tử theo viewport

    - z-index: dùng để xác định xem phần tử nào nằm cao hơn phần tử nào (phần tử thấp hơn có thể bị che khuất)

    - position: sticky; - dùng để tạo hiệu ứng bám dính, khi nội dung trong thẻ cha gần nhất có thanh cuộn

88. Giới thiệu về dàn trang, Page layout & component layout, tìm hiểu về Float layout
    - float (left, right, both)
    - clear

89.1 Flex Box CSS - flex container
    - flex box: sẽ đưa phần tử ra khỏi luồng thông thường, tuân theo quy tắc riêng
        + trục main axis: trục nằm ngang
        + trục cross axis: trục nằm dọc
    - https://css-tricks.com/snippets/css/a-guide-to-flexbox

    - justify-content: căn theo trục main axis
        + flex-start: căn sang trái
        + flex-end: căn sang phải
        + center: căn giữa
        + space-between: cách đều nhau, sát lề
        + space-evenly: cách đều nhau, cách cả lề
        + space-around: khoảng trắng xung quanh mỗi phần tử là bằng nhau

    - align-items: căn theo trục cross axis
        + flex-start: căn trên top
        + flex-end: căn dưới bottom
        + center: căn giữa
        + stretch: kéo đầy khối chứa
        + baseline: căn theo chân phần tử

    - flex-wrap: cho phép xuống hàng để đạt đủ kích thước
        + nowrap: không xuống dòng
        + wrap: cho phép xuống hàng
        + wrap-reverse: xuống hàng và đảo ngược

    - align-content: sử dụng kèm với flex-wrap, dùng để căn nhiều hàng theo cross axis
        + flex-start: căn trên top
        + flex-end: căn dưới bottom
        + center: căn giữa
        + stretch: tự kéo giãn lấp đầy khối cha
        + space-between: cách đều nhau, sát lề
        + space-around: khoảng trắng xung quanh mỗi phần tử là bằng nhau

    - flex-direction: row | row-reverse -> xoay hướng trục main axis, cross axis không đổi
      flex-direction: column | column-reverse -> main axis theo chiều dọc - cột + cross axis bị đẩy sang theo chiều ngang

    - flex-flow: flex-wrap flex-direction -> viết tắt

    - https://game.tuhoc.cc/3/#vi

89.2. Flex Box CSS - flex item
    - align-self: căn theo trục cross axis
        + flex-start: căn trên top
        + flex-end: căn dưới bottom
        + center: căn giữa
        + stretch: kéo đầy khối chứa
        + baseline: căn theo chân phần tử

    - flex-grow: chia tỉ lệ theo trọng số

    - flex-shrink: xác định khả năng co lại của item nếu cần

    - flex-basis: set main size item (theo trục main axis)

    - flex: flex-grow flex-shrink flex-basis

    - order: thay đổi thứ tự các item
